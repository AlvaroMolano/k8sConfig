kind: Deployment
apiVersion: apps/v1
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
      - name: jenkins
        image: localhost:32000/jenkins-with-docker   #jenkins/jenkins:lts-alpine #10.152.183.58:5000/jenkins-with-docker #registry.container-registry.svc.cluster.local:5000/jenkins-with-docker #jenkins/jenkins:lts
        #securityContext:
        #  privileged: true   # would also need to add "--allow-privileged=true" to i) `sudo vim /var/snap/microk8s/current/args/kubelet` and ii) `sudo vim /var/snap/microk8s/current/args/kube-apiserver`
        # then do: `sudo systemctl restart snap.microk8s.daemon-kubelet.service` and `sudo systemctl restart snap.microk8s.daemon-apiserver.service`
        ports:
        - containerPort: 8080
        volumeMounts:
          - name: storage
            mountPath: "/var/jenkins_home"
            #- name: ssh-jenkins-volume
            #mountPath: "/var/jenkins_home/.ssh"
            
            # `docker` inside Docker won't work! Pass up to the host's docker :)
            # Note: it is very important to adjust the container docker's gid to be the same as the host docker gid
          - name: docker-sock-volume
            mountPath: /var/run/docker.sock
          - name: kube-config
            mountPath: ~/.kube/config
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: pvc-jenkins
            #- name: ssh-jenkins-volume
            #secret:
            #secretName: ssh-jenkins
        - name: docker-sock-volume
          hostPath:
            path: /var/run/docker.sock
            type: File
        - name: kube-config
          hostPath:
            path: /home/ehynes/.kube/config.jenkins
            type: File
